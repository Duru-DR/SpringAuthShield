-- Create User table
CREATE TABLE auth_user (
                      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                      username VARCHAR(255) NOT NULL UNIQUE,
                      password VARCHAR(255) NOT NULL,
                      email VARCHAR(255) NOT NULL UNIQUE,
                      full_name VARCHAR(255),
                      enabled BOOLEAN NOT NULL DEFAULT TRUE,
                      status VARCHAR(20) NOT NULL DEFAULT 'ACTIVE',
    -- AuditInfo embedded fields
                      created_date TIMESTAMP,
                      last_modified_date TIMESTAMP,
                      created_by VARCHAR(255),
                      last_modified_by VARCHAR(255)
);

-- Indexes for User table
CREATE INDEX idx_user_status ON auth_user(status);
CREATE INDEX idx_user_enabled ON auth_user(enabled);

-- Create Role table
CREATE TABLE role (
                      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                      name VARCHAR(255) NOT NULL UNIQUE,
                      description VARCHAR(255),
    -- AuditInfo embedded fields
                      created_date TIMESTAMP,
                      last_modified_date TIMESTAMP,
                      created_by VARCHAR(255),
                      last_modified_by VARCHAR(255)
);

-- Create Permission table
CREATE TABLE permission (
                            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                            name VARCHAR(255) NOT NULL UNIQUE,
                            description VARCHAR(255) NOT NULL,
    -- AuditInfo embedded fields
                            created_date TIMESTAMP,
                            last_modified_date TIMESTAMP,
                            created_by VARCHAR(255),
                            last_modified_by VARCHAR(255)
);


-- Create join table for User-Role many-to-many
CREATE TABLE user_roles (
                            user_id BIGINT NOT NULL,
                            role_id BIGINT NOT NULL,
                            PRIMARY KEY (user_id, role_id),
                            FOREIGN KEY (user_id) REFERENCES auth_user(id) ON DELETE CASCADE,
                            FOREIGN KEY (role_id) REFERENCES role(id) ON DELETE CASCADE
);

-- Indexes for user_roles (composite already PK, add for FKs)
CREATE INDEX idx_user_roles_user_id ON user_roles(user_id);
CREATE INDEX idx_user_roles_role_id ON user_roles(role_id);

-- Create join table for Role-Permission many-to-many
CREATE TABLE role_permissions (
                                  role_id BIGINT NOT NULL,
                                  permission_id BIGINT NOT NULL,
                                  PRIMARY KEY (role_id, permission_id),
                                  FOREIGN KEY (role_id) REFERENCES role(id) ON DELETE CASCADE,
                                  FOREIGN KEY (permission_id) REFERENCES permission(id) ON DELETE CASCADE
);

-- Indexes for role_permissions (composite already PK, add for FKs)
CREATE INDEX idx_role_permissions_role_id ON role_permissions(role_id);
CREATE INDEX idx_role_permissions_permission_id ON role_permissions(permission_id);

-- Create Refresh Token table
CREATE TABLE refresh_token (
                               id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                               token VARCHAR(512) NOT NULL UNIQUE,
                               expiry_date TIMESTAMP NOT NULL,
                               user_id BIGINT NOT NULL,
                               FOREIGN KEY (user_id) REFERENCES auth_user(id) ON DELETE CASCADE
);

-- Indexes for refresh_token table
CREATE INDEX idx_refresh_token_user_id ON refresh_token(user_id);
CREATE INDEX idx_refresh_token_expiry_date ON refresh_token(expiry_date);